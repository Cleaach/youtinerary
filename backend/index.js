// index.js
const express = require('express');
const cors = require('cors');
const { generateItinerary } = require('./openaiService');
const { getFirestore, collection, doc, deleteDoc, setDoc, getDoc, getDocs, query, where } = require("firebase/firestore");
const { initializeApp } = require("firebase/app");

// Firebase Config (Replace with your own)
const firebaseConfig = {
    apiKey: process.env.FIREBASE_API_KEY,
    authDomain: process.env.FIREBASE_AUTH_DOMAIN,
    projectId: process.env.FIREBASE_PROJECT_ID,
    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.FIREBASE_APP_ID,
    measurementId: process.env.FIREBASE_MEASUREMENT_ID
  };

// Initialize Firebase
const firebaseApp = initializeApp(firebaseConfig);
const db = getFirestore(firebaseApp);
const app = express();
const PORT = 2200;

app.use(express.json());
app.use(cors());

//APIS
app.get('/api/hello', (req, res) => {
    res.json({ message: 'Hello from Express API!' });
});


app.post('/api/itinerary', async (req, res) => {
    const { startDate, endDate, group, pace, interests, budget, destinations, userId, tripName } = req.body;

    // Validate required inputs or provide defaults
    const validatedInterests = Array.isArray(interests) ? interests : [];
    const validatedDestinations = Array.isArray(destinations) ? destinations : [];
    
    const prompt = `
        Generate an itinerary from ${startDate || 'today'} to ${endDate || 'next week'} 
        for a ${group || 'solo traveler'} with a ${pace || 'medium'} pace.
        Interests: ${validatedInterests.join(', ') || 'general tourism'}.
        Budget: ${budget || 'medium'}.
        Destinations: ${validatedDestinations.join(', ') || 'popular destinations'}.
        Format as a json (excluding carriage return) (add more days in the days array as required):
        {
            "tripId": "<auto-generated>",
            "startDate": "${startDate || new Date().toISOString()}",
            "endDate": "${endDate || new Date().toISOString()}",
            "userId": "${userId || 'anonymous'}",
            "budget": "${budget || 'medium'}",
            "group": "${group || 'solo'}",
            "pace": "${pace || 'medium'}",
            "interests": ${JSON.stringify(validatedInterests)},
            "tripName": "${tripName || 'My Trip'}",
            "days": [
              {
                "dayId": 1,
                "destinations": [
                  {
                    "name": "<destination name>",
                    "latitude": "<latitude as string>",
                    "longitude": "<longitude as string>"
                  },
                  {
                    "name": "<another destination>",
                    "latitude": "<latitude as string>",
                    "longitude": "<longitude as string>"
                  }
                ]
              }
            ]
          }
    `;

    try {
        const itineraryResponse = await generateItinerary(prompt);
        console.log(itineraryResponse);
        const itinerary = JSON.parse(itineraryResponse); // Convert JSON string to object

        // Generate a unique trip ID
        const tripId = `trip_${Date.now()}`;
        
        // Safely extract and map days
        const days = Array.isArray(itinerary.days) ? itinerary.days.map(day => ({
            dayId: day.dayId || day.dayNumber || 1,
            destinations: Array.isArray(day.destinations) ? day.destinations.map(dest => ({
                name: dest.name || 'Unnamed Destination',
                latitude: dest.latitude || '0',
                longitude: dest.longitude || '0',
                startTime: dest.startTime || null,
                endTime: dest.endTime || null
            })) : []
        })) : [];

        // Prepare validated data for Firestore
        const validatedData = {
            tripId,
            startDate: startDate || new Date().toISOString(),
            endDate: endDate || new Date().toISOString(),
            userId: userId || 'anonymous',
            tripName: tripName || 'My Trip',
            budget: budget || 'medium', 
            group: group || 'solo', 
            pace: pace || 'medium', 
            interests: validatedInterests, 
            days
        };

        // Automatically store itinerary in Firestore
        const response = await fetch('http://localhost:2200/api/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(validatedData)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to store itinerary: ${errorData.message || response.statusText}`);
        }

        res.json({ message: "Itinerary generated and saved successfully", tripId });

    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ 
            error: 'Could not generate and save itinerary', 
            details: error.message,
            tip: "Check if all required fields are provided in your request"
        });
    }
});


app.post('/api/create', async (req, res) => {
    try {
        const { tripId, startDate, endDate, userId, budget, group, pace, interests, tripName, days } = req.body;
        
        // Validate required fields or provide default values
        if (!tripId) {
            return res.status(400).send({ message: "tripId is required" });
        }
        
        const createdAt = new Date().toISOString();
        
        // Create document with validated fields (using default values when needed)
        const itineraryData = {
            startDate: startDate || new Date().toISOString(),
            endDate: endDate || new Date().toISOString(),
            userId: userId || 'anonymous',  // Default value for userId
            tripName: tripName || 'Untitled Trip',
            budget: budget || 'Not specified',
            group: group || 'Solo',
            pace: pace || 'Medium',
            interests: Array.isArray(interests) ? interests : [],
            createdAt
        };

        // Create itinerary document
        await setDoc(doc(db, "itineraries", tripId), itineraryData);

        // Add days and destinations
        if (Array.isArray(days)) {
            for (const day of days) {
                // Skip if day is invalid
                if (!day || !day.dayId) continue;
                
                const dayId = String(day.dayId);
                const dayRef = doc(db, `itineraries/${tripId}/days`, dayId);
                await setDoc(dayRef, { dayId: day.dayId });

                // Add destinations if they exist
                if (Array.isArray(day.destinations)) {
                    for (const destination of day.destinations) {
                        // Skip invalid destinations
                        if (!destination || !destination.name) continue;
                        
                        const destRef = doc(db, `itineraries/${tripId}/days/${dayId}/destinations`, destination.name);
                        await setDoc(destRef, {
                            name: destination.name,
                            latitude: destination.latitude || '0',
                            longitude: destination.longitude || '0'
                        });
                    }
                }
            }
        }

        return res.status(201).send({ 
            message: "Itinerary created successfully", 
            tripId,
            itineraryData
        });

    } catch (error) {
        console.error("Firebase error:", error);
        res.status(500).send({ 
            message: "Failed to create itinerary", 
            error: error.message,
            code: error.code
        });
    }
});


app.get('/api/view/:id', async (req, res) => {
    try {
        const tripId = req.params.id;

        // Fetch itinerary document
        const itineraryRef = doc(db, "itineraries", tripId);
        const itinerarySnap = await getDoc(itineraryRef);

        if (!itinerarySnap.exists()) {
            return res.status(404).send({ message: "Itinerary not found" });
        }

        let itineraryData = itinerarySnap.data();
        itineraryData.days = [];

        // Fetch days subcollection
        const daysRef = collection(db, `itineraries/${tripId}/days`);
        const daysSnap = await getDocs(daysRef);

        for (const dayDoc of daysSnap.docs) {
            let dayData = { dayId: dayDoc.id, destinations: [] };

            // Fetch destinations subcollection
            const destinationsRef = collection(db, `itineraries/${tripId}/days/${dayDoc.id}/destinations`);
            const destinationsSnap = await getDocs(destinationsRef);

            for (const destDoc of destinationsSnap.docs) {
                dayData.destinations.push(destDoc.data());
            }

            itineraryData.days.push(dayData);
        }

        return res.status(200).send(itineraryData);

    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});



app.delete('/api/view/:id/:dayId/:destName', async (req, res) => {
    try {
        const { id: tripId, dayId, destName } = req.params;

        // Check if the itinerary exists
        const itineraryRef = doc(db, "itineraries", tripId);
        const itinerarySnap = await getDoc(itineraryRef);

        if (!itinerarySnap.exists()) {
            return res.status(404).send({ message: "Itinerary not found" });
        }

        // Check if the day exists
        const dayRef = doc(db, `itineraries/${tripId}/days`, dayId);
        const daySnap = await getDoc(dayRef);

        if (!daySnap.exists()) {
            return res.status(404).send({ message: "Day not found" });
        }

        // Delete the destination from the day
        const destRef = doc(db, `itineraries/${tripId}/days/${dayId}/destinations`, destName);
        await deleteDoc(destRef);

        return res.status(200).send({ message: "Destination deleted successfully" });

    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});

app.delete('/api/view/:id', async (req, res) => {
    try {
        const { id: tripId } = req.params;

        // Check if the itinerary exists
        const itineraryRef = doc(db, "itineraries", tripId);
        const itinerarySnap = await getDoc(itineraryRef);

        if (!itinerarySnap.exists()) {
            return res.status(404).send({ message: "Itinerary not found" });
        }

        // Fetch all days subcollection
        const daysRef = collection(db, `itineraries/${tripId}/days`);
        const daysSnap = await getDocs(daysRef);

        // Delete all destinations for each day
        for (const dayDoc of daysSnap.docs) {
            const dayDestinationsRef = collection(db, `itineraries/${tripId}/days/${dayDoc.id}/destinations`);
            const destinationsSnap = await getDocs(dayDestinationsRef);

            // Delete all destinations under the day
            for (const destDoc of destinationsSnap.docs) {
                await deleteDoc(destDoc.ref);
            }

            // Delete the day document
            await deleteDoc(dayDoc.ref);
        }

        // Finally, delete the itinerary document
        await deleteDoc(itineraryRef);

        return res.status(200).send({ message: "Itinerary and all associated data deleted successfully" });

    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});

app.put('/api/view/:id/move-destination', async (req, res) => {
    try {
        const { id: tripId } = req.params; // Itinerary ID
        const { sourceDayId, targetDayId, destName } = req.body; // Source day ID, target day ID, and destination name

        if (!sourceDayId || !targetDayId || !destName) {
            return res.status(400).send({ message: "Missing required parameters" });
        }

        // Fetch the itinerary document
        const itineraryRef = doc(db, "itineraries", tripId);
        const itinerarySnap = await getDoc(itineraryRef);
        if (!itinerarySnap.exists()) {
            return res.status(404).send({ message: "Itinerary not found" });
        }

        // Fetch source day document
        const sourceDayRef = doc(db, `itineraries/${tripId}/days`, sourceDayId.toString());
        const sourceDaySnap = await getDoc(sourceDayRef);
        if (!sourceDaySnap.exists()) {
            return res.status(404).send({ message: "Source day not found" });
        }

        // Fetch target day document
        const targetDayRef = doc(db, `itineraries/${tripId}/days`, targetDayId.toString());
        const targetDaySnap = await getDoc(targetDayRef);
        if (!targetDaySnap.exists()) {
            return res.status(404).send({ message: "Target day not found" });
        }

        // Fetch the destination from the source day
        const sourceDestRef = doc(db, `itineraries/${tripId}/days/${sourceDayId}/destinations`, destName);
        const sourceDestSnap = await getDoc(sourceDestRef);
        if (!sourceDestSnap.exists()) {
            return res.status(404).send({ message: "Destination not found in source day" });
        }

        // Fetch target day destinations sub-collection
        const targetDestRef = doc(db, `itineraries/${tripId}/days/${targetDayId}/destinations`, destName);

        // Check if destination already exists in target day
        const targetDestSnap = await getDoc(targetDestRef);
        if (targetDestSnap.exists()) {
            return res.status(400).send({ message: "Destination already exists in target day" });
        }

        // Move the destination: delete from source day and add to target day
        const destinationData = sourceDestSnap.data();

        // Remove the destination from source day
        await deleteDoc(sourceDestRef);

        // Add the destination to target day
        await setDoc(targetDestRef, destinationData);

        return res.status(200).send({ message: "Destination moved successfully" });

    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});

// Get all itineraries
app.get('/api/itineraries', async (req, res) => {
    try {
        const itinerariesRef = collection(db, "itineraries");
        const itinerariesSnap = await getDocs(itinerariesRef);

        if (itinerariesSnap.empty) {
            return res.status(404).send({ message: "No itineraries found" });
        }

        const itineraries = [];
        itinerariesSnap.forEach(doc => {
            itineraries.push({ tripId: doc.id, ...doc.data() });
        });

        return res.status(200).send(itineraries);
    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});

// Get itineraries for a specific user
app.get('/api/itineraries/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const itinerariesRef = collection(db, "itineraries");
        const q = query(itinerariesRef, where("userId", "==", userId)); // Query to filter by userId
        const itinerariesSnap = await getDocs(q);

        if (itinerariesSnap.empty) {
            return res.status(404).send({ message: `No itineraries found for user ${userId}` });
        }

        const itineraries = [];
        itinerariesSnap.forEach(doc => {
            itineraries.push({ tripId: doc.id, ...doc.data() });
        });

        return res.status(200).send(itineraries);
    } catch (error) {
        console.error(error);
        res.status(500).send({ message: error.message });
    }
});


app.listen(PORT, () => {
    console.log(`API server running at http://localhost:${PORT}`);
});